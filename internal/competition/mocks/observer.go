// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AleksandrMatsko/yadro-biathlon/internal/competition (interfaces: Observer)
//
// Generated by this command:
//
//	mockgen -destination=internal/competition/mocks/observer.go -package=mock_observer github.com/AleksandrMatsko/yadro-biathlon/internal/competition Observer
//

// Package mock_observer is a generated GoMock package.
package mock_observer

import (
	reflect "reflect"

	event "github.com/AleksandrMatsko/yadro-biathlon/internal/event"
	gomock "go.uber.org/mock/gomock"
)

// MockObserver is a mock of Observer interface.
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *MockObserverMockRecorder
	isgomock struct{}
}

// MockObserverMockRecorder is the mock recorder for MockObserver.
type MockObserverMockRecorder struct {
	mock *MockObserver
}

// NewMockObserver creates a new mock instance.
func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &MockObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObserver) EXPECT() *MockObserverMockRecorder {
	return m.recorder
}

// NotifyWithEvent mocks base method.
func (m *MockObserver) NotifyWithEvent(arg0 event.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyWithEvent", arg0)
}

// NotifyWithEvent indicates an expected call of NotifyWithEvent.
func (mr *MockObserverMockRecorder) NotifyWithEvent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyWithEvent", reflect.TypeOf((*MockObserver)(nil).NotifyWithEvent), arg0)
}
